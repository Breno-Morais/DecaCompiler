// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {
    float sin(float f) {
        println("sin(f) not yet implemented");
    }
    float cos(float f) {
        println("cos(f) not yet implemented");
    }
    float asin(float f) {
        println("asin(f) not yet implemented");
    }
    float atan(float f) {
        println("atan(f) not yet implemented");
    }
    float ulp(float f) {
        int exposant = _getExposant(f);
        exposant = exposant - 150;
        float ulp = _power(2, exposant);
        return ulp;
    }

    float _power(float indice, int exposant){
        int compteur;
        float produit;
        if(exposant == 0){
            return 1.0;
        }
        if(exposant > 0){
            compteur = 1;
            produit = indice;
            while(compteur < exposant){
                produit = produit * indice;
                compteur = compteur + 1;
            }
        }
        else{
            compteur = -1;
            produit = 1 / indice;
            while(compteur > exposant){
                produit = produit / indice;
                compteur = compteur - 1;
            }
        }
        return produit;
    }

    int _factorial(int factor){
        int compteur = factor;
        int produit = factor;
        while(compteur > 1){
            compteur = compteur - 1;
            produit = produit * compteur;
        }
        return produit;
    }

    float _absVal(float f){
        if(f < 0){
            return -f;
        }
        else{
            return f;
        }
    }

    int _getExposant(float f){
        //On réalise une méthode de recherche dichotomique pour obtenir l'exposant du flottant dans sa représentation IEEE754.
        int left = 0;
        int right = 255;
        while(left < right){
            int mid = left + ((right - left) / 2);
            float valeurSup = _power(2.0, (mid - 126));
            float valeurInf = _power(2.0, (mid - 127));
            if((valeurInf <= _absVal(f)) && (_absVal(f) < valeurSup)){
                return mid;
                }
            if(_absVal(f) < valeurInf){
                right = mid;
                }
            if(_absVal(f) > valeurSup){
                left = mid;
                }
            if(_absVal(f) == valeurSup){
                mid = mid + 1;
                return mid;
                }
            }
        if((left == right) && (right == 0)){
            return 0;
        }
        return -1;
    }
}


// End of Deca Math library
